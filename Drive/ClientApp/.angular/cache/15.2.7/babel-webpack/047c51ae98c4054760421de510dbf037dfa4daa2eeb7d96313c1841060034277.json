{"ast":null,"code":"import { UrlSegment } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nexport class RouteMatcherService {\n  constructor() {}\n  static isBaseDir(segments) {\n    if (segments.length === 2) return {\n      consumed: segments,\n      posParams: {}\n    };else return null;\n  }\n  static addBaseDirRoute(segments) {\n    if (segments.length !== 1) {\n      return null;\n    }\n    const queryParams = segments[0].parameters;\n    const hasQueryParam = queryParams && Object.keys(queryParams).length === 1;\n    if (!hasQueryParam) {\n      return null;\n    }\n    const paramValue = queryParams['createBaseDir'];\n    if (paramValue !== 'true') {\n      return null;\n    }\n    return {\n      consumed: segments,\n      posParams: {\n        param: new UrlSegment(paramValue, {})\n      }\n    };\n  }\n}\nRouteMatcherService.ɵfac = function RouteMatcherService_Factory(t) {\n  return new (t || RouteMatcherService)();\n};\nRouteMatcherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RouteMatcherService,\n  factory: RouteMatcherService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAyBA,UAAU,QAAQ,iBAAiB;;AAK5D,OAAM,MAAOC,mBAAmB;EAE9BC,eAAgB;EAEhB,OAAOC,SAAS,CAACC,QAAsB;IACvC,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EACvB,OAAO;MAAEC,QAAQ,EAAEF,QAAQ;MAAEG,SAAS,EAAE;IAAE,CAAE,CAAC,KAE7C,OAAO,IAAI;EACb;EAEA,OAAOC,eAAe,CAACJ,QAAsB;IAE7C,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;MACzB,OAAO,IAAI;;IAGb,MAAMI,WAAW,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAACM,UAAU;IAC1C,MAAMC,aAAa,GAAGF,WAAW,IAAIG,MAAM,CAACC,IAAI,CAACJ,WAAW,CAAC,CAACJ,MAAM,KAAK,CAAC;IAE1E,IAAI,CAACM,aAAa,EAAE;MAClB,OAAO,IAAI;;IAGb,MAAMG,UAAU,GAAGL,WAAW,CAAC,eAAe,CAAC;IAC/C,IAAIK,UAAU,KAAK,MAAM,EAAE;MACzB,OAAO,IAAI;;IAGX,OAAO;MACLR,QAAQ,EAAEF,QAAQ;MAClBG,SAAS,EAAE;QACTQ,KAAK,EAAE,IAAIf,UAAU,CAACc,UAAU,EAAE,EAAE;;KAEvC;EACL;;AAnCab,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAe,SAAnBf,mBAAmB;EAAAgB,YAFlB;AAAM","names":["UrlSegment","RouteMatcherService","constructor","isBaseDir","segments","length","consumed","posParams","addBaseDirRoute","queryParams","parameters","hasQueryParam","Object","keys","paramValue","param","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Opportunity\\Desktop\\Teodor - anul II\\Opțional de dezvoltarea aplicațiilor web (ASP.NET)\\ProiectRefacut\\Drive\\ClientApp\\src\\app\\core\\helpers\\route-matcher.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RouteMatcherService {\r\n\r\n  constructor() { }\r\n\r\n  static isBaseDir(segments: UrlSegment[]): any {\r\n  if (segments.length === 2)\r\n    return { consumed: segments, posParams: {} };\r\n  else\r\n    return null;\r\n  }\r\n\r\n  static addBaseDirRoute(segments: UrlSegment[]): UrlMatchResult | null {\r\n  \r\n  if (segments.length !== 1) {\r\n    return null;\r\n  }\r\n\r\n  const queryParams = segments[0].parameters;\r\n  const hasQueryParam = queryParams && Object.keys(queryParams).length === 1;\r\n\r\n  if (!hasQueryParam) {\r\n    return null;\r\n  }\r\n\r\n  const paramValue = queryParams['createBaseDir'];\r\n  if (paramValue !== 'true') {\r\n    return null;\r\n  }\r\n\r\n    return {\r\n      consumed: segments,\r\n      posParams: {\r\n        param: new UrlSegment(paramValue, {})\r\n      }\r\n    };\r\n}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}