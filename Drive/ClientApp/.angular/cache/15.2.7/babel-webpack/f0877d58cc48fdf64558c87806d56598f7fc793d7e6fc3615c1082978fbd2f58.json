{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { DateFormattingPipe } from '../../core/pipes/date-formatting.pipe';\nimport { RouterModule } from '@angular/router';\nimport { CreateBaseDirComponent } from '../create-base-dir/create-base-dir.component';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nlet MainPageComponent = class MainPageComponent {\n  constructor(location, getEntriesService, router, formBuilder, createBaseDirService) {\n    this.location = location;\n    this.getEntriesService = getEntriesService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.createBaseDirService = createBaseDirService;\n    this.items = [];\n    this.pathToAsk = \"\";\n    this.currentFolder = \"\";\n    this.createBaseDirContent = \"\";\n    this.createBaseDirForm = this.formBuilder.group({\n      DirectoryName: ['', Validators.required],\n      IsPublic: ['true']\n    });\n  }\n  ngOnInit() {\n    this.pathToAsk = this.location.path();\n    var pathParts = this.pathToAsk.split('/');\n    this.currentFolder = pathParts[pathParts.length - 1];\n    this.getEntriesService.getEntries(this.pathToAsk).subscribe(data => {\n      this.items = data;\n    }, error => {\n      console.error('Error during fetching entries: ' + error.error.message);\n    });\n  }\n  getPathParts() {\n    return this.location.path().split('/');\n  }\n  isUserDir() {\n    return this.getPathParts().length === 2;\n  }\n  isBaseDir() {\n    return this.getPathParts().length === 3;\n  }\n  createBaseDir() {\n    /*\r\n    const params = {\r\n      queryParams: { createBaseDir: 'true' },\r\n    };\r\n    this.router.navigate([this.router.url], params);\r\n    */\n    this.createBaseDirContent = `<form class=\"formDir\" [formGroup]=\"createBaseDirForm\">\n      < input class=\"formElems\" matInput formControlName = \"DirectoryName\" type = \"text\" placeholder = \"Directory name\" required >\n\n        <div class=\"formElems\" >\n          <input type=\"radio\" id = \"public\" formControlName = \"IsPublic\" value = \"true\" checked >\n            <label for= \"public\" > Public < /label>\n\n              < input type = \"radio\" id = \"private\" formControlName = \"IsPublic\" value = \"false\" >\n                <label for= \"private\" > Private < /label>\n                  < /div>\n\n                  < button mat - raised - button color = \"primary\"(click) = \"create()\" > Create < /button>\n                  < /form>\n`;\n  }\n  download() {\n    // TODO\n  }\n  create() {\n    let dto = {\n      DirectoryName: this.createBaseDirForm.get('DirectoryName')?.value?.toString() || '',\n      IsPublic: this.createBaseDirForm.get('IsPublic')?.value === 'true'\n    };\n    this.createBaseDirService.create(dto).subscribe(data => {\n      this.createBaseDirContent = '';\n      this.router.navigate([this.router.url]);\n    }, error => {\n      console.error(error);\n    }, () => {});\n  }\n};\nMainPageComponent = __decorate([Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css'],\n  standalone: true,\n  imports: [CommonModule, MatIconModule, DateFormattingPipe, RouterModule, CreateBaseDirComponent, ReactiveFormsModule]\n})], MainPageComponent);\nexport { MainPageComponent };","map":{"version":3,"mappings":"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","names":["Component","CommonModule","MatIconModule","DateFormattingPipe","RouterModule","CreateBaseDirComponent","ReactiveFormsModule","Validators","MainPageComponent","constructor","location","getEntriesService","router","formBuilder","createBaseDirService","group","DirectoryName","required","IsPublic","ngOnInit","pathToAsk","path","pathParts","split","currentFolder","length","getEntries","subscribe","data","items","error","console","message","getPathParts","isUserDir","isBaseDir","createBaseDir","createBaseDirContent","download","create","dto","createBaseDirForm","get","value","toString","navigate","url","selector","templateUrl","styleUrls","standalone","imports"],"sourceRoot":"","sources":["C:\\Users\\Opportunity\\Desktop\\Teodor - anul II\\Opțional de dezvoltarea aplicațiilor web (ASP.NET)\\ProiectRefacut\\Drive\\ClientApp\\src\\app\\components\\main-page\\main-page.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Entry } from '../../data/interfaces/entry';\r\nimport { GetEntriesService } from '../../core/services/get-entries.service';\r\nimport { Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { DateFormattingPipe } from '../../core/pipes/date-formatting.pipe';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CreateBaseDirComponent } from '../create-base-dir/create-base-dir.component';\r\nimport { BaseDirCrUpRequestDto } from '../../data/interfaces/base-dir-cr-up-request-dto';\r\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { CreateBaseDirService } from '../../core/services/create-base-dir.service';\r\n\r\n@Component({\r\n  selector: 'app-main-page',\r\n  templateUrl: './main-page.component.html',\r\n  styleUrls: ['./main-page.component.css'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    DateFormattingPipe,\r\n    RouterModule,\r\n    CreateBaseDirComponent,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class MainPageComponent implements OnInit {\r\n  \r\n  items: Entry[] = [];\r\n  pathToAsk: string = \"\";\r\n  currentFolder: string = \"\";\r\n  createBaseDirContent: string = \"\";\r\n  constructor(private location: Location, private readonly getEntriesService: GetEntriesService, private router: Router,\r\n    private readonly formBuilder: FormBuilder, private createBaseDirService: CreateBaseDirService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.pathToAsk = this.location.path();\r\n    var pathParts = this.pathToAsk.split('/');\r\n    this.currentFolder = pathParts[pathParts.length - 1];\r\n    this.getEntriesService.getEntries(this.pathToAsk).subscribe(\r\n      (data: any) => {\r\n        this.items = data;\r\n      },\r\n      (error) => {\r\n        console.error('Error during fetching entries: ' + error.error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  getPathParts(): string[] {\r\n    return this.location.path().split('/');\r\n  }\r\n\r\n  isUserDir(): boolean {\r\n    return this.getPathParts().length === 2;\r\n  }\r\n\r\n  isBaseDir(): boolean {\r\n    return this.getPathParts().length === 3;\r\n  }\r\n\r\n  createBaseDir() {\r\n    /*\r\n    const params = {\r\n      queryParams: { createBaseDir: 'true' },\r\n    };\r\n    this.router.navigate([this.router.url], params);\r\n    */\r\n\r\n    this.createBaseDirContent = `<form class=\"formDir\" [formGroup]=\"createBaseDirForm\">\r\n      < input class=\"formElems\" matInput formControlName = \"DirectoryName\" type = \"text\" placeholder = \"Directory name\" required >\r\n\r\n        <div class=\"formElems\" >\r\n          <input type=\"radio\" id = \"public\" formControlName = \"IsPublic\" value = \"true\" checked >\r\n            <label for= \"public\" > Public < /label>\r\n\r\n              < input type = \"radio\" id = \"private\" formControlName = \"IsPublic\" value = \"false\" >\r\n                <label for= \"private\" > Private < /label>\r\n                  < /div>\r\n\r\n                  < button mat - raised - button color = \"primary\"(click) = \"create()\" > Create < /button>\r\n                  < /form>\r\n`;\r\n  }\r\n\r\n  download() {\r\n    // TODO\r\n  }\r\n\r\n\r\n  createBaseDirForm = this.formBuilder.group({\r\n    DirectoryName: ['', Validators.required],\r\n    IsPublic: ['true']\r\n  });\r\n\r\n  create() {\r\n    let dto: BaseDirCrUpRequestDto = {\r\n      DirectoryName: this.createBaseDirForm.get('DirectoryName')?.value?.toString() || '',\r\n      IsPublic: this.createBaseDirForm.get('IsPublic')?.value === 'true'\r\n    };\r\n\r\n    this.createBaseDirService.create(dto).subscribe(\r\n      (data: any) => {\r\n        this.createBaseDirContent = '';\r\n        this.router.navigate([this.router.url]);\r\n      },\r\n      (error: any) => {\r\n        console.error(error);\r\n      },\r\n      () => {\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}