{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  intercept(request, next) {\n    const token = localStorage.getItem('jwt');\n    if (token) {\n      // Clone the request and add the Authorization header with the JWT\n      const clonedRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      // Pass the cloned request to the next handler\n      return next.handle(clonedRequest);\n    }\n    // If no token, just pass the request through\n    return next.handle(request);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";AAUA,OAAM,MAAOA,eAAe;EAE1BC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;IAEzC,IAAIF,KAAK,EAAE;MACT;MACA,MAAMG,aAAa,GAAGL,OAAO,CAACM,KAAK,CAAC;QAClCC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUN,KAAK;;OAEjC,CAAC;MAEF;MACA,OAAOD,IAAI,CAACQ,MAAM,CAACJ,aAAa,CAAC;;IAGnC;IACA,OAAOJ,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;EAC7B;;AAnBWF,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;AAAA","names":["AuthInterceptor","intercept","request","next","token","localStorage","getItem","clonedRequest","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\Opportunity\\Desktop\\Teodor - anul II\\Opțional de dezvoltarea aplicațiilor web (ASP.NET)\\ProiectRefacut\\Drive\\ClientApp\\src\\app\\core\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = localStorage.getItem('jwt');\n\n    if (token) {\n      // Clone the request and add the Authorization header with the JWT\n      const clonedRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      // Pass the cloned request to the next handler\n      return next.handle(clonedRequest);\n    }\n\n    // If no token, just pass the request through\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}