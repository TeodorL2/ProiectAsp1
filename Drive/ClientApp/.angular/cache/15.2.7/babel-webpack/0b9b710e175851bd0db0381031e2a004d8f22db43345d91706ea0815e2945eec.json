{"ast":null,"code":"import { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../core/services/create-base-dir.service\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/button\";\nexport class CreateBaseDirComponent {\n  constructor(formBuilder, router, createBaseDirService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.createBaseDirService = createBaseDirService;\n    this.createBaseDirForm = this.formBuilder.group({\n      DirectoryName: ['', Validators.required],\n      IsPublic: ['true']\n    });\n  }\n  create() {\n    let dto = {\n      DirectoryName: this.createBaseDirForm.get('DirectoryName')?.value?.toString() || '',\n      IsPublic: this.createBaseDirForm.get('IsPublic')?.value === 'true'\n    };\n    this.createBaseDirService.create(dto).subscribe(data => {\n      const pathParts = this.router.url.split('?');\n      const path = pathParts[0];\n      this.router.navigate([path]);\n    }, error => {\n      console.error(error);\n    }, () => {});\n  }\n}\nCreateBaseDirComponent.ɵfac = function CreateBaseDirComponent_Factory(t) {\n  return new (t || CreateBaseDirComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CreateBaseDirService));\n};\nCreateBaseDirComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateBaseDirComponent,\n  selectors: [[\"app-create-base-dir\"]],\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 11,\n  vars: 1,\n  consts: [[1, \"formDir\", 3, \"formGroup\"], [\"matInput\", \"\", \"formControlName\", \"DirectoryName\", \"type\", \"text\", \"placeholder\", \"Directory name\", \"required\", \"\", 1, \"formElems\"], [1, \"formElems\"], [\"type\", \"radio\", \"id\", \"public\", \"formControlName\", \"IsPublic\", \"value\", \"true\", \"checked\", \"\"], [\"for\", \"public\"], [\"type\", \"radio\", \"id\", \"private\", \"formControlName\", \"IsPublic\", \"value\", \"false\"], [\"for\", \"private\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function CreateBaseDirComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵelement(1, \"input\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelement(3, \"input\", 3);\n      i0.ɵɵelementStart(4, \"label\", 4);\n      i0.ɵɵtext(5, \"Public\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 5);\n      i0.ɵɵelementStart(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Private\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function CreateBaseDirComponent_Template_button_click_9_listener() {\n        return ctx.create();\n      });\n      i0.ɵɵtext(10, \"Create\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.createBaseDirForm);\n    }\n  },\n  dependencies: [ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, MatInputModule, i4.MatInput, MatButtonModule, i5.MatButton, MatFormFieldModule],\n  styles: [\".formDir[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-content: space-around;\\r\\n  align-items: center;\\r\\n  justify-content: flex-start;\\r\\n  width: 100vw;\\r\\n  padding: 1vw;\\r\\n  margin-bottom: 5vw;\\r\\n  border-style: none;\\r\\n  box-shadow: 0 2px 10px 0 #0000cc;\\r\\n}\\r\\n\\r\\n.formElems[_ngcontent-%COMP%]\\r\\n{\\r\\n    width: 40%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9jcmVhdGUtYmFzZS1kaXIvY3JlYXRlLWJhc2UtZGlyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IsMkJBQTJCO0VBQzNCLG1CQUFtQjtFQUNuQiwyQkFBMkI7RUFDM0IsWUFBWTtFQUNaLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdDQUFnQztBQUNsQzs7QUFFQTs7SUFFSSxVQUFVO0FBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9ybURpciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XHJcbiAgd2lkdGg6IDEwMHZ3O1xyXG4gIHBhZGRpbmc6IDF2dztcclxuICBtYXJnaW4tYm90dG9tOiA1dnc7XHJcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xyXG4gIGJveC1zaGFkb3c6IDAgMnB4IDEwcHggMCAjMDAwMGNjO1xyXG59XHJcblxyXG4uZm9ybUVsZW1zXHJcbntcclxuICAgIHdpZHRoOiA0MCU7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AAC7E,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,kBAAkB,QAAQ,8BAA8B;;;;;;;AAiBjE,OAAM,MAAOC,sBAAsB;EACjCC,YAA6BC,WAAwB,EAAUC,MAAc,EAAUC,oBAA0C;IAApG,gBAAW,GAAXF,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAkB,yBAAoB,GAApBC,oBAAoB;IAE3G,sBAAiB,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACzCC,aAAa,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACxCC,QAAQ,EAAE,CAAC,MAAM;KAClB,CAAC;EALmI;EAOrIC,MAAM;IACJ,IAAIC,GAAG,GAA0B;MAC/BJ,aAAa,EAAE,IAAI,CAACK,iBAAiB,CAACC,GAAG,CAAC,eAAe,CAAC,EAAEC,KAAK,EAAEC,QAAQ,EAAE,IAAI,EAAE;MACnFN,QAAQ,EAAG,IAAI,CAACG,iBAAiB,CAACC,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK,KAAK;KAC9D;IAED,IAAI,CAACT,oBAAoB,CAACK,MAAM,CAACC,GAAG,CAAC,CAACK,SAAS,CAC5CC,IAAS,IAAI;MACZ,MAAMC,SAAS,GAAG,IAAI,CAACd,MAAM,CAACe,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC;MAC5C,MAAMC,IAAI,GAAGH,SAAS,CAAC,CAAC,CAAC;MACzB,IAAI,CAACd,MAAM,CAACkB,QAAQ,CAAC,CAACD,IAAI,CAAC,CAAC;IAC9B,CAAC,EACAE,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,EACD,MAAK,CAEL,CAAC,CACF;EACH;;AA3BWtB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCrBnCC,+BAAsD;MAClDA,2BAAoH;MAEpHA,8BAAuB;MACrBA,2BAAgF;MAChFA,gCAAoB;MAAAA,sBAAM;MAAAA,iBAAQ;MAElCA,2BAA0E;MAC1EA,gCAAqB;MAAAA,uBAAO;MAAAA,iBAAQ;MAGxCA,iCAA6D;MAAnBA;QAAA,OAASC,YAAQ;MAAA,EAAC;MAACD,uBAAM;MAAAA,iBAAS;;;MAXxDA,iDAA+B;;;iBDcjDpC,mBAAmB,yLACnBE,cAAc,eACdC,eAAe,gBACfC,kBAAkB;EAAAkC;AAAA","names":["ReactiveFormsModule","Validators","MatInputModule","MatButtonModule","MatFormFieldModule","CreateBaseDirComponent","constructor","formBuilder","router","createBaseDirService","group","DirectoryName","required","IsPublic","create","dto","createBaseDirForm","get","value","toString","subscribe","data","pathParts","url","split","path","navigate","error","console","selectors","standalone","features","decls","vars","consts","template","i0","ctx","styles"],"sourceRoot":"","sources":["C:\\Users\\Opportunity\\Desktop\\Teodor - anul II\\Opțional de dezvoltarea aplicațiilor web (ASP.NET)\\ProiectRefacut\\Drive\\ClientApp\\src\\app\\components\\create-base-dir\\create-base-dir.component.ts","C:\\Users\\Opportunity\\Desktop\\Teodor - anul II\\Opțional de dezvoltarea aplicațiilor web (ASP.NET)\\ProiectRefacut\\Drive\\ClientApp\\src\\app\\components\\create-base-dir\\create-base-dir.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { Router } from '@angular/router';\r\nimport { CreateBaseDirService } from '../../core/services/create-base-dir.service';\r\nimport { BaseDirCrUpRequestDto } from '../../data/interfaces/base-dir-cr-up-request-dto';\r\n\r\n@Component({\r\n  selector: 'app-create-base-dir',\r\n  templateUrl: './create-base-dir.component.html',\r\n  styleUrls: ['./create-base-dir.component.css'],\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n  ],\r\n  standalone: true\r\n})\r\nexport class CreateBaseDirComponent {\r\n  constructor(private readonly formBuilder: FormBuilder, private router: Router, private createBaseDirService: CreateBaseDirService) { }\r\n\r\n  createBaseDirForm = this.formBuilder.group({\r\n    DirectoryName: ['', Validators.required],\r\n    IsPublic: ['true']\r\n  });\r\n\r\n  create() {\r\n    let dto: BaseDirCrUpRequestDto = {\r\n      DirectoryName: this.createBaseDirForm.get('DirectoryName')?.value?.toString() || '',\r\n      IsPublic : this.createBaseDirForm.get('IsPublic')?.value === 'true'\r\n    };\r\n\r\n    this.createBaseDirService.create(dto).subscribe(\r\n      (data: any) => {\r\n        const pathParts = this.router.url.split('?');\r\n        const path = pathParts[0];\r\n        this.router.navigate([path]);\r\n      },\r\n      (error: any) => {\r\n        console.error(error);\r\n      },\r\n      () => {\r\n        \r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<form class=\"formDir\" [formGroup]=\"createBaseDirForm\">\n    <input class=\"formElems\" matInput formControlName=\"DirectoryName\" type=\"text\" placeholder=\"Directory name\" required>\n\n    <div class=\"formElems\">\n      <input type=\"radio\" id=\"public\" formControlName=\"IsPublic\" value=\"true\" checked>\n      <label for=\"public\">Public</label>\n\n      <input type=\"radio\" id=\"private\" formControlName=\"IsPublic\" value=\"false\">\n      <label for=\"private\">Private</label>\n    </div>\n\n  <button mat-raised-button color=\"primary\" (click)=\"create()\">Create</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}